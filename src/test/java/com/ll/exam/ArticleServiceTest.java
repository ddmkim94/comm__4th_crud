package com.ll.exam;

import com.ll.exam.article.dto.ArticleDto;
import com.ll.exam.article.service.ArticleService;
import com.ll.exam.mymap.MyMap;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.stream.IntStream;

import static org.assertj.core.api.Assertions.assertThat;

public class ArticleServiceTest {

    // Í∞Å ÌÖåÏä§Ìä∏ÎßàÎã§ Ïã§ÌñâÎêòÎäî Î©îÏÑúÎìú!!
    // Îç∞Ïù¥ÌÑ∞Î•º ÏßÄÏö∞Í≥† Îã§Ïãú ÏÉàÎ°ú ÎßåÎì§Ïñ¥Ï£ºÎäî Ïó≠Ìï†!
    // ÌÖåÏä§Ìä∏Ïùò ÎèÖÎ¶ΩÏÑ±ÏùÑ Î∂ÄÏó¨Ìï¥Ï£ºÎäî Ïó≠Ìï†ÏùÑ ÌïúÎã§.
    // üìå ÌÖåÏä§Ìä∏Îäî ÏàúÏÑúÏóê ÏùòÏ°¥ÌïòÎèÑÎ°ù ÏûëÏÑ±ÌïòÎ©¥ ÏïàÎêúÎã§!!
    @BeforeEach
    public void beforeEach() {
        truncateArticleTable();
        makeArticleTestDate();
    }

    private void makeArticleTestDate() {
        // ÌÖåÏù¥Î∏îÏóê Îç∞Ïù¥ÌÑ∞Î•º Îã§Ïãú Ï±ÑÏõåÏ§å
        MyMap myMap = Container.getObj(MyMap.class);

        IntStream.rangeClosed(1, 3).forEach(no -> {
            boolean isBlind = false;
            String title = "Ï†úÎ™©%d".formatted(no);
            String body = "ÎÇ¥Ïö©%d".formatted(no);

            myMap.run("""
                    INSERT INTO article
                    SET createdDate = NOW(),
                    modifiedDate = NOW(),
                    title = ?,
                    `body` = ?,
                    isBlind = ?
                    """, title, body, isBlind);
        });
    }

    private void truncateArticleTable() {
        // ÌÖåÏù¥Î∏î Ï¥àÍ∏∞Ìôî
        MyMap myMap = Container.getObj(MyMap.class);
        myMap.run("TRUNCATE article");
    }

    @Test
    public void articleServiceÍ∞Ä_Ï°¥Ïû¨ÌïúÎã§() {
        ArticleService articleService = Container.getObj(ArticleService.class);

        assertThat(articleService).isNotNull();
    }

    @Test
    public void getArticles() {
        ArticleService articleService = Container.getObj(ArticleService.class);

        List<ArticleDto> articleDtoList = articleService.getArticles();
        assertThat(articleDtoList.size()).isEqualTo(3);
    }

    @Test
    public void getArticleById() {
        ArticleService articleService = Container.getObj(ArticleService.class);
        ArticleDto articleDto = articleService.getArticleById(1);

        assertThat(articleDto.getId()).isEqualTo(1L);
        assertThat(articleDto.getTitle()).isEqualTo("Ï†úÎ™©1");
        assertThat(articleDto.getBody()).isEqualTo("ÎÇ¥Ïö©1");
        assertThat(articleDto.getCreatedDate()).isNotNull();
        assertThat(articleDto.getModifiedDate()).isNotNull();
        assertThat(articleDto.isBlind()).isFalse();
    }

    @Test
    @DisplayName("Ï†ÑÏ≤¥ Í≤åÏãúÎ¨º Í∞úÏàò ÌÖåÏä§Ìä∏!")
    public void getArticlesCount() {
        ArticleService articleService = Container.getObj(ArticleService.class);

        long articlesCount = articleService.getArticlesCount();

        assertThat(articlesCount).isEqualTo(3);
    }

    @Test
    @DisplayName("Í∏Ä ÏûëÏÑ± ÌÖåÏä§Ìä∏!")
    public void write() {
        ArticleService articleService = Container.getObj(ArticleService.class);

        long newArticleId = articleService.write("Ï†úÎ™© new", "ÎÇ¥Ïö© new", false);
        ArticleDto articleDto = articleService.getArticleById(newArticleId);

        assertThat(articleDto.getId()).isEqualTo(newArticleId);
        assertThat(articleDto.getTitle()).isEqualTo("Ï†úÎ™© new");
        assertThat(articleDto.getBody()).isEqualTo("ÎÇ¥Ïö© new");
        assertThat(articleDto.getCreatedDate()).isNotNull();
        assertThat(articleDto.getModifiedDate()).isNotNull();
        assertThat(articleDto.isBlind()).isFalse();
    }
}
